import logging
import requests
import utm
import numpy as np
from cityseer.util import graphs, mock, plot
from shapely import wkt, geometry

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)


# dictionary of benchmark locations
benchmarks = {
    'soho': {
        'name': 'Soho, London, UK',
        'geom': 'POLYGON ((-0.14230864144963257 51.515257461495466, -0.14208100192666018 51.51450797567812, -0.14206239273152926 51.5144691866015, -0.14150989578349776 51.51364087659829, -0.14149292490106516 51.51361927541875, -0.1400144560213995 51.51199740309739, -0.1386110877475804 51.51029740366967, -0.13857039209470848 51.51025963424933, -0.13851682024417641 51.51022870918595, -0.13748717881774053 51.50975981410131, -0.13743814710911503 51.50974148551072, -0.13738460193135063 51.509728971583, -0.1373283053712745 51.50972268413391, -0.1361731003422434 51.509660163582616, -0.1361099982342492 51.509660693688765, -0.13604832976247994 51.50966903464322, -0.13508040074950442 51.50986481959191, -0.13441561755598136 51.50989437211949, -0.13435024439693005 51.509901641749636, -0.13428876772851087 51.509917272094015, -0.13423391478938768 51.5099405697682, -0.13418811899219 51.50997050124679, -0.13415341197209027 51.51000573870984, -0.13366774212936483 51.51064049253827, -0.13278118082854953 51.51131155021189, -0.13216609650958777 51.51163545698588, -0.12974948664362332 51.51259672403733, -0.12973601930681058 51.512602390228665, -0.12885705443107298 51.51299311150157, -0.12880972903758672 51.51301895574694, -0.12877159746015385 51.51305013621637, -0.12874417997734175 51.51308540979788, -0.12872856972331426 51.51312337018713, -0.1287253891007216 51.513162503953694, -0.12873476495949251 51.51320125087922, -0.13006574656586986 51.51645195242283, -0.13008775977116824 51.5164893456761, -0.13012145074829815 51.51652320352172, -0.13016543212575832 51.516552131688414, -0.13021789275892387 51.516574938908, -0.13027667231386894 51.516590685974236, -0.13033935023298368 51.51659872442116, -0.13040334541886292 51.5165987232279, -0.13286446175001504 51.5164424421318, -0.1328829039265672 51.516440927607015, -0.13938728094101957 51.51578454450316, -0.13939241607049901 51.51578399898128, -0.14205443885342717 51.515487060905606, -0.14211426860212178 51.51547650958903, -0.14216960748989352 51.51545885675749, -0.14221830334782834 51.51543478895335, -0.14225846237337333 51.51540524220038, -0.14228852278094006 51.51537136559886, -0.14230731553799958 51.51533447663434, -0.14231410982466122 51.51529600993858, -0.14230864144963257 51.515257461495466))'
    },
    'marylebone': {
        'name': 'Marylebone, London, UK',
        'geom': 'POLYGON ((-0.14054942863048517 51.51524126210419, -0.1404757772853511 51.51525591095893, -0.14040844851951362 51.51527957072053, -0.14035025369757512 51.51531125347663, -0.1403036228134441 51.51534963630575, -0.14027050302206617 51.51539311651306, -0.14025227732862622 51.5154398785491, -0.14024970683086482 51.51548796981776, -0.14026289892804777 51.51553538220872, -0.14381467789415905 51.523402756644025, -0.14390433635307404 51.52404601443241, -0.14391689825679993 51.524089072913384, -0.1439420485715033 51.52412994168076, -0.14397891874766047 51.524167209294546, -0.1440262354679713 51.52419958868024, -0.14408236462030238 51.52422596158124, -0.14414536773352574 51.524245417181014, -0.14421306892682076 51.52425728356078, -0.14428313006016377 51.52426115090598, -0.14435313148948922 51.524256885659916, -0.14542986636082655 51.52412757142908, -0.14545942058066033 51.52412325025778, -0.14800449745561445 51.52368338202616, -0.15122814916489663 51.523362829370235, -0.15123953736032192 51.52336158545991, -0.15281703052748896 51.52317376633919, -0.15284998684438023 51.52316888160565, -0.16426594456527369 51.52113611963382, -0.16561111306592755 51.52096238026576, -0.16561934383689905 51.520961257512866, -0.16679261664638867 51.5207926642275, -0.16684528796356107 51.5207825304966, -0.16888118831620122 51.5202870878643, -0.17012900596496824 51.52017357692819, -0.17020139513552562 51.52016236733577, -0.1702688433771695 51.52014253892031, -0.17032872934211724 51.52011486232007, -0.170378725607027 51.52008041318776, -0.17041688912693592 51.52004053038262, -0.17044173674720703 51.51999676393334, -0.17045230283892673 51.51995081479515, -0.1704481768189988 51.51990446874231, -0.1704295190979479 51.519859526965845, -0.17039705483709533 51.519817736073456, -0.17035204575899093 51.51978072021169, -0.16033760370004665 51.51304190464401, -0.16028085907175368 51.51301066324426, -0.16021525006085185 51.512987084468264, -0.1601434076405191 51.51297211384341, -0.16006821273849697 51.51296635170653, -0.15999268071671105 51.512970029130805, -0.1536237360308704 51.51368437743502, -0.14899242098338267 51.51413776716626, -0.14897338664544763 51.51413994184745, -0.14054942863048517 51.51524126210419))'
    },
    'greenwich': {
        'name': 'Greenwich Village, Manhattan, USA',
        'geom': 'POLYGON ((-74.01094837988778 40.729166711516676, -74.01006145430132 40.73933929926754, -74.01005437479995 40.73937188348615, -74.01003912209492 40.73940281800587, -74.00826527093457 40.7421518964327, -74.00824124582688 40.742181176537485, -74.00820992366845 40.742206186245284, -74.00817259042974 40.742225898756516, -74.00813077887362 40.742239504754345, -74.00808620562597 40.74224644563133, -74.00804070069728 40.742246436423194, -74.00799613234946 40.74223947750796, -74.00795433039183 40.742225854590515, -73.99078022591915 40.73498637845167, -73.9907439105671 40.73496729957559, -73.9907132286238 40.73494320171921, -73.99068936803805 40.73491501790261, -73.99067325264814 40.734883839347255, -73.9906655064125 40.734850873226506, -73.99066642925125 40.73481739592665, -73.99115020684044 40.73176252054285, -73.9911617770919 40.73172537594865, -73.99118398008737 40.73169111929256, -73.99654584838325 40.72533652239367, -73.99657303583996 40.72531035027647, -73.99660642901922 40.725288692428116, -73.9966447488762 40.725272378404746, -73.99668652766158 40.725262033079616, -73.99673016514024 40.725258052708206, -73.99677398988425 40.7252605897501, -73.99681632329296 40.72526954702937, -73.99685554388773 40.725284581456606, -74.00290125328978 40.72819739908404, -74.01075382194384 40.72898678373926, -74.01079493318515 40.72899394495543, -74.01083355202738 40.72900680578381, -74.0108683159471 40.729024912474365, -74.01089799842765 40.729047626195324, -74.0109215522321 40.72907414557254, -74.01093814635136 40.72910353496364, -74.01094719532313 40.729134757469275, -74.01094837988778 40.729166711516676))'
    },
    'gothic': {
        'name': 'Gothic Quarter, Barcelona, Spain',
        'geom': 'POLYGON ((2.182348743456987 41.38123501194608, 2.1783364712412263 41.37600009346485, 2.1783221257359733 41.375984834584045, 2.1783042854540926 41.37597181548972, 2.178283558890282 41.37596148023743, 2.178260652984277 41.375954181342344, 2.1782363490086176 41.37595016775555, 2.1782114759210742 41.37594957637273, 2.178186882090634 41.37595242736481, 2.178163406361407 41.37595862348996, 2.1770555401540865 41.37634058483246, 2.1770333050789468 41.376350277013756, 2.1770139285016348 41.37636296221947, 2.176998116071618 41.37637817848259, 2.1761597308260736 41.37736677330738, 2.176146229569008 41.377387655183895, 2.1757348393348597 41.37826963696968, 2.1750910272459865 41.37886251992654, 2.175082358256206 41.37887146009081, 2.173106164461801 41.38116309182372, 2.173103372312034 41.38116647366476, 2.171666140478613 41.382986241246, 2.1716621956863253 41.38299159941411, 2.1699554828910994 41.38548527206915, 2.169945185848379 41.38550531015063, 2.169940762403326 41.385526527962604, 2.169942412162424 41.3855479680577, 2.1699500606808435 41.38556866295904, 2.169963362821741 41.38558767881721, 2.1726282301725703 41.38857546224887, 2.17264507739758 41.388590829549145, 2.1726656102818853 41.388603423509544, 2.172689033392012 41.388612756248214, 2.1727144393286135 41.38861846622107, 2.1727408438786546 41.388620332227646, 2.172767224143325 41.38861828198014, 2.1727925581646166 41.388612394903724, 2.1728158645154574 41.38860289905974, 2.172836240319696 41.38859016231086, 2.182327958926236 41.381356346815046, 2.182343757526696 41.38134182956146, 2.1823557135005083 41.381325373745476, 2.182363415994958 41.38130754485025, 2.182366600323055 41.38128895554354, 2.1823651570591784 41.38127024462422, 2.1823591357993632 41.38125205507076, 2.182348743456987 41.38123501194608))'
    }
}

distances = [100, 200, 400, 800]

# using "keys" below
for loc, data in benchmarks.items():

    logger.info(f'Processing location: {loc}')

    benchmark_name = data['name']

    # create shapely polygon from original query geom
    geom_wkt = data['geom']
    geom_wgs = wkt.loads(geom_wkt)
    # set the UTM zone info from the first coordinate of the polygon's exterior ring - remember lat, lng order
    utm_zone_number, utm_zone_letter = utm.from_latlon(geom_wgs.exterior.coords.xy[1][0],
                                                       geom_wgs.exterior.coords.xy[0][0])[2:]
    # convert the coords to UTM, returns in easting, northing order
    utm_coords = [utm.from_latlon(lat, lng, force_zone_number=utm_zone_number)[:2] for lng, lat in
                  geom_wgs.exterior.coords]
    # reconstruct as UTM geom
    geom_utm = geometry.Polygon([[x, y] for x, y in utm_coords])
    # buffer
    geom_buffered = geom_utm.buffer(max(distances)).simplify(1)
    # cast back to WGS for overpass query - leave in lat, lng order
    geom_osm = [utm.to_latlon(e, n, utm_zone_number, utm_zone_letter) for e, n in geom_buffered.exterior.coords]
    # format for OSM query
    geom_osm = str.join(' ', [f'{lat} {lng}' for lat, lng in geom_osm])
    # osm query
    timeout = 20
    filters = '["area"!~"yes"]' \
              '["highway"!~"path|footway|motor|proposed|construction|abandoned|platform|raceway|service"]' \
              '["foot"!~"no"]' \
              '["service"!~"private"]' \
              '["access"!~"private"]'
    query = f'[out:json][timeout:{timeout}];(way["highway"]{filters}(poly:"{geom_osm}"); >;);out skel qt;'
    logger.info(f'Fetching OSM data for {loc}')
    try:
        response = requests.get('https://overpass-api.de/api/interpreter',
                                timeout=timeout,
                                params={
                                    'data': query
                                })
    except requests.exceptions.RequestException as e:
        logger.error(e)
        raise e

    G_wgs = mock.mock_osm_graph(osm_json=response.text)

    G_utm = graphs.nX_wgs_to_utm(G_wgs, force_zone_number=utm_zone_number)

    G_clean = graphs.nX_simple_geoms(G_utm)

    G_clean = graphs.nX_remove_filler_nodes(G_clean)

    G_clean = graphs.nX_remove_dangling_nodes(G_clean, despine=25, remove_disconnected=True)

    # find min_l from raw graph so as to anticipate original structural grain
    lengths = []
    for s, e, d in G_clean.edges(data=True):
        l = d['geom'].length
        lengths.append(l)
    min_l = np.nanpercentile(lengths, 10)
    # constrain
    if min_l < 10:
        min_l = 10
    if min_l > 20:
        min_l = 20

    G_clean = graphs.nX_consolidate(G_clean, buffer_dist=min_l, by_neighbours=True)
    G_clean = graphs.nX_decompose(G_clean, 25)
    G_clean = graphs.nX_consolidate(G_clean, buffer_dist=min_l)

    # do this after cleaning and decomposition
    plot.plot_nX(G_clean, dpi=300, figsize=(20, 20))
